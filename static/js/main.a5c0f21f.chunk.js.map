{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","model","preview","prediction","onDrop","accepted","rejected","links","_this","setState","onImageChange","e","image","tf","fromPixels","target","resizeBilinear","expandDims","div","predict","batchSize","data","then","result","probability","Array","from","toFixed","_this2","this","react_default","a","createElement","className","build_default","accept","multiple","alt","onLoad","src","React","Component","rootElement","document","getElementById","ReactDOM","render","App_App","Boolean","window","location","hostname","match","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uUAMMA,6MACJC,MAAQ,CACNC,MAAO,KACPC,QAAS,GACTC,WAAY,QAWdC,OAAS,SAACC,EAAUC,EAAUC,GAC5BC,EAAKC,SAAS,CACZP,QAASG,EAAS,GAAGH,SAAWK,EAAM,GACtCJ,WAAY,UAIhBO,cAAgB,SAAAC,GACd,IAAIC,EAAQC,IAAWC,WAAWH,EAAEI,QAAQC,eAAe,CAAC,IAAK,MAAMC,aAAaC,IAAI,KACxFV,EAAKR,MAAMC,MAAMkB,QAAQP,EAAO,CAACQ,UAAW,IAAIC,OAAOC,KAAK,SAAAC,GAC1D,IAAIC,EAAsC,IAAxBC,MAAMC,KAAKH,GAAQ,GACjCpB,EAAaqB,EAAc,GAC1B,eAAOA,EAAYG,QAAQ,GAAK,eAChC,gBAAQ,IAAMH,GAAaG,QAAQ,GAAK,eAC7CnB,EAAKC,SAAS,CAAEN,WAAYA,0FAtBZ,IAAAyB,EAAAC,KAClBhB,IAAmB,8BAA8BS,KAAK,SAAArB,GACpD2B,EAAKnB,SAAS,CACZR,MAAOA,uCAwBX,OACE6B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZJ,KAAK7B,MAAMC,MACV6B,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEE,UAAU,WACVE,OAAO,2CACPC,UAAU,EACVhC,OAAQyB,KAAKzB,QAEb0B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACZJ,KAAK7B,MAAME,QACV4B,EAAAC,EAAAC,cAAA,OACEK,IAAI,iBACJC,OAAQT,KAAKnB,cACbuB,UAAU,eACVM,IAAKV,KAAK7B,MAAME,UAGlB,2BAKN4B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,oBAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACZJ,KAAK7B,MAAMG,oBA5DJqC,IAAMC,WAmElBC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASL,GACV3C,QC/DKiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNP,IAASC,OAAOhB,EAAAC,EAAAC,cAACqB,EAAD,MAASV,SAASC,eAAe,SD2H3C,kBAAmBU,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.a5c0f21f.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport MagicDropzone from 'react-magic-dropzone';\nimport * as tf from '@tensorflow/tfjs';\nimport './index.css';\n\nclass App extends React.Component {\n  state = {\n    model: null,\n    preview: '',\n    prediction: null\n  };\n\n  componentDidMount() {\n    tf.loadLayersModel('/neko-inu/model/model.json').then(model => {\n      this.setState({\n        model: model\n      });\n    });\n  }\n\n  onDrop = (accepted, rejected, links) => {\n    this.setState({\n      preview: accepted[0].preview || links[0],\n      prediction: null\n    });\n  };\n\n  onImageChange = e => {\n    let image = tf.browser.fromPixels(e.target).resizeBilinear([192, 192]).expandDims().div(255);\n    this.state.model.predict(image, {batchSize: 1}).data().then(result => {\n      let probability = Array.from(result)[0] * 100;\n      let prediction = probability > 50\n        ? ('犬（' + probability.toFixed(2) + '％）')\n        : ('猫（' + (100 - probability).toFixed(2) + '％）');\n      this.setState({ prediction: prediction });\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"dropzone-page\">\n        {this.state.model ? (\n          <MagicDropzone\n            className=\"dropzone\"\n            accept=\"image/jpeg, image/png, .jpg, .jpeg, .png\"\n            multiple={false}\n            onDrop={this.onDrop}\n          >\n            <div className=\"dropzone-content\">\n              {this.state.preview ? (\n                <img\n                  alt=\"upload preview\"\n                  onLoad={this.onImageChange}\n                  className=\"dropzone-img\"\n                  src={this.state.preview}\n                />\n              ) : (\n                \"Choose or drop a file.\"\n              )}\n            </div>\n          </MagicDropzone>\n        ) : (\n          <div className=\"dropzone\">Loading model...</div>\n        )}\n        <div className=\"prediction\">\n          {this.state.prediction}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}